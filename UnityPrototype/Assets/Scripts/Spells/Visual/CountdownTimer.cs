//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class CountdownTimer : EffectGameObject
{
	private IDelayEffect targetDelay;

	public CustomFontRenderer fontRenderer;
	public Color color = Color.red;
	public float growHitpoint = 0.5f;
	public Vector2 screenSize = new Vector2(32.0f, 20.0f);
	public Vector3 worldOffset;

	public override void StartEffect (EffectInstance instance)
	{
		base.StartEffect (instance);
		targetDelay = instance.GetValue<IDelayEffect>("target");
	}

	public AnimationCurve perSecondGrow = new AnimationCurve(new Keyframe[]{
		new Keyframe(0.0f, 0.0f, 0.0f, 45.0f),
		new Keyframe(0.5f, 1.0f, -45.0f, 0.0f),
		new Keyframe(1.0f, 1.0f)
	});

	private delegate void DrawCallback(string text, float lerp);

	private void HandleTextDraw(DrawCallback drawCallback)
	{
		float remainingTime = targetDelay.RemainingTime;
		
		if (remainingTime >= 0.0f)
		{
			gameObject.SetActive(true);
			float timeInSecond = 1.0f - (remainingTime + growHitpoint) % 1.0f;
			float lerpValue = perSecondGrow.Evaluate(timeInSecond);

			drawCallback(remainingTime.ToString("0.0"), lerpValue);

		}
		else
		{
			if (targetDelay.IsPersistant())
			{
				gameObject.SetActive(false);
			}
			else
			{
				Destroy(gameObject);
			}
		}

	}

	public void Update()
	{
		if (fontRenderer != null)
		{
			HandleTextDraw((text, lerpValue) => {
				fontRenderer.DrawText(transform.position + worldOffset, text, CustomFontRenderer.CenterAlign);
			});
		}
	}

	public void OnGUI()
	{
		if (fontRenderer == null)
		{
			HandleTextDraw((text, lerpValue) => {
				Vector3 screenPos = Camera.main.WorldToScreenPoint(transform.position + worldOffset);
				screenPos.y = Screen.height - screenPos.y;

				GUI.color = new Color(color.r, color.g, color.b, color.a * lerpValue);
				GUI.Label(new Rect(screenPos.x - screenSize.x * 0.5f, screenPos.y - screenSize.y, screenSize.x, screenSize.y), text);
			});
		}
	}
}