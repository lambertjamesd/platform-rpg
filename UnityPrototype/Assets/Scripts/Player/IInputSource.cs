//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Linq;

public class InputState
{
	private InputState previousState;
	private float horizontalControl;
	private bool jumpButton;
	private bool[] fireButtons;
	private Vector3 aimDirection;
	private float timestamp;

	public InputState(InputState previousState)
	{
		this.previousState = previousState;
		this.horizontalControl = 0.0f;
		this.jumpButton = false;
		this.fireButtons = new bool[0];
		this.aimDirection = Vector3.zero;
		this.timestamp = 0.0f;
	}
	
	public InputState(InputState previousState, float horizontalControl, bool jumpButton, bool[] fireButtons, Vector3 aimDirection, float timestamp)
	{
		this.previousState = previousState;
		this.horizontalControl = horizontalControl;
		this.jumpButton = jumpButton;
		this.fireButtons = fireButtons;
		this.aimDirection = aimDirection;
		this.timestamp = timestamp;
	}

	public InputState WithNewAim(float newHorizontalControl, Vector3 newAimDirection)
	{
		return new InputState(previousState, newHorizontalControl, jumpButton, fireButtons, newAimDirection, timestamp);
	}

	public float HorizontalControl
	{
		get
		{
			return horizontalControl;
		}
	}
	
	public bool JumpButton
	{
		get
		{
			return jumpButton;
		}
	}
	
	public bool JumpButtonDown
	{
		get
		{
			if (previousState == null)
			{
				return jumpButton;
			}
			else
			{
				return jumpButton && !previousState.jumpButton;
			}
		}
	}

	public bool BufferedJumpButtonDown(float timeBuffer)
	{
		InputState currentState = this;
		float startTime = timestamp;

		while (currentState != null && startTime - currentState.timestamp <= timeBuffer)
		{
			if (currentState.JumpButtonDown)
			{
				return true;
			}

			currentState = currentState.previousState;
		}

		return false;
	}

	public bool FireButton(int index)
	{
		if (index < fireButtons.Length)
		{
			return fireButtons[index];
		}
		else
		{
			return false;
		}
	}

	public bool FireButtonUp(int index)
	{
		if (previousState == null)
		{
			return false;
		}
		else
		{
			return !FireButton(index) && previousState.FireButton(index);
		}
	}
	
	public bool FireButtonDown(int index)
	{
		if (previousState == null)
		{
			return FireButton(index);
		}
		else
		{
			return FireButton(index) && !previousState.FireButton(index);
		}
	}

	public Vector3 AimDirection
	{
		get
		{
			return aimDirection;
		}
	}

	public static InputState Deserialize(SimpleJSON.JSONNode source, InputState prev)
	{
		float timestamp = source["timestamp"].AsFloat;

		if (timestamp == 0.0f && prev != null)
		{
			timestamp = prev.timestamp + 1.0f;
		}

		return new InputState(prev, 
			source["hc"].AsFloat,
			source["jump"].AsBool,
			source["fire"].AsArray.Childs.Select(value => value.AsBool).ToArray(),
			new Vector3(
				source["x"].AsFloat,
				source["y"].AsFloat,
				source["z"].AsFloat
			),
		    timestamp
		 );
	}

	public SimpleJSON.JSONNode Serialize()
	{
		SimpleJSON.JSONNode result = new SimpleJSON.JSONClass();
		result.Add("hc", new SimpleJSON.JSONData(horizontalControl));
		result.Add("jump", new SimpleJSON.JSONData(jumpButton));
		SimpleJSON.JSONArray fireJson = new SimpleJSON.JSONArray();
		foreach (bool fireButton in fireButtons)
		{
			fireJson.Add(new SimpleJSON.JSONData(fireButton));
		}
		result.Add("fire", fireJson);
		result.Add("x", new SimpleJSON.JSONData(aimDirection.x)); 
		result.Add("y", new SimpleJSON.JSONData(aimDirection.y));
		result.Add("z", new SimpleJSON.JSONData(aimDirection.z));
		result.Add("timestamp", new SimpleJSON.JSONData(timestamp));
		return result;
	}
}

public interface IInputSource
{
	void FrameStart(InputState previousState);
	InputState State { get; }
}