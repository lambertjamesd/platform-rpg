//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Linq;

public class InputState
{
	private InputState previousState;
	private float horizontalControl;
	private bool jumpButton;
	private bool[] fireButtons;
	private Vector3 aimDirection;

	public InputState(InputState previousState)
	{
		this.previousState = previousState;
		this.horizontalControl = 0.0f;
		this.jumpButton = false;
		this.fireButtons = new bool[0];
		this.aimDirection = Vector3.zero;
	}
	
	public InputState(InputState previousState, float horizontalControl, bool jumpButton, bool[] fireButtons, Vector3 aimDirection)
	{
		this.previousState = previousState;
		this.horizontalControl = horizontalControl;
		this.jumpButton = jumpButton;
		this.fireButtons = fireButtons;
		this.aimDirection = aimDirection;
	}

	public InputState WithNewAim(float newHorizontalControl, Vector3 newAimDirection)
	{
		return new InputState(previousState, newHorizontalControl, jumpButton, fireButtons, newAimDirection);
	}

	public float HorizontalControl
	{
		get
		{
			return horizontalControl;
		}
	}
	
	public bool JumpButton
	{
		get
		{
			return jumpButton;
		}
	}
	
	public bool JumpButtonDown
	{
		get
		{
			if (previousState == null)
			{
				return jumpButton;
			}
			else
			{
				return jumpButton && !previousState.jumpButton;
			}
		}
	}

	public bool FireButton(int index)
	{
		if (index < fireButtons.Length)
		{
			return fireButtons[index];
		}
		else
		{
			return false;
		}
	}

	public bool FireButtonUp(int index)
	{
		if (previousState == null)
		{
			return false;
		}
		else
		{
			return !FireButton(index) && previousState.FireButton(index);
		}
	}
	
	public bool FireButtonDown(int index)
	{
		if (previousState == null)
		{
			return FireButton(index);
		}
		else
		{
			return FireButton(index) && !previousState.FireButton(index);
		}
	}

	public Vector3 AimDirection
	{
		get
		{
			return aimDirection;
		}
	}

	public static InputState Deserialize(SimpleJSON.JSONNode source, InputState prev)
	{
		return new InputState(prev, 
			source["horizontalControl"].AsFloat,
			source["jumpButton"].AsBool,
			source["fireButtons"].AsArray.Childs.Select(value => value.AsBool).ToArray(),
			new Vector3(
				source["aimX"].AsFloat,
				source["aimY"].AsFloat,
				source["aimZ"].AsFloat
			)
		 );
	}

	public SimpleJSON.JSONNode Serialize()
	{
		SimpleJSON.JSONNode result = new SimpleJSON.JSONNode();
		result.Add("horizontalControl", new SimpleJSON.JSONData(horizontalControl));
		result.Add("jumpButton", new SimpleJSON.JSONData(jumpButton));
		SimpleJSON.JSONArray fireButtons = new SimpleJSON.JSONArray();
		foreach (bool fireButton in fireButtons)
		{
			fireButtons.Add(new SimpleJSON.JSONData(fireButton));
		}
		result.Add("fireButtons", fireButtons);
		result.Add("aimX", new SimpleJSON.JSONData(aimDirection.x)); 
		result.Add("aimY", new SimpleJSON.JSONData(aimDirection.y));
		result.Add("aimZ", new SimpleJSON.JSONData(aimDirection.z));
		return result;
	}
}

public interface IInputSource
{
	void FrameStart(InputState previousState);
	InputState State { get; }
}