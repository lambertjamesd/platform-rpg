//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public enum EffectOperatorPrecedence
{
	MinPrecedence,
	Equality,
	Compare,
	Addition,
	Multiplication,
	MaxPrecedence
}

public abstract class EffectBinaryOpProperty : EffectProperty
{
	protected EffectProperty operandA;
	protected EffectProperty operandB;
	private string operatorName;

	protected EffectBinaryOpProperty(EffectProperty operandA, EffectProperty operandB, string operatorName)
	{
		this.operandA = operandA;
		this.operandB = operandB;
		this.operatorName = operatorName;
	}

	public string OperatorName
	{
		get
		{
			return operatorName;
		}
	}
	
	public EffectProperty OperandA
	{
		get
		{
			return operandA;
		}
	}
	
	public EffectProperty OperandB
	{
		get
		{
			return operandB;
		}
	}

	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}

	public static EffectBinaryOpProperty CreateOperator(EffectProperty operandA, EffectProperty operandB, string operatorName)
	{
		switch (operatorName)
		{
		case "+":
			return new EffectAddOpProperty(operandA, operandB);
		case "-":
			return new EffectSubOpProperty(operandA, operandB);
		case "*":
			return new EffectMulOpProperty(operandA, operandB);
		case "/":
			return new EffectDivOpProperty(operandA, operandB);
		case "<":
			return new EffectLessThanProperty(operandA, operandB);
		case "<=":
			return new EffectLessEqualProperty(operandA, operandB);
		case ">":
			return new EffectGreaterThanProperty(operandA, operandB);
		case ">=":
			return new EffectGreaterEqualProperty(operandA, operandB);
		case "==":
			return new EffectEqualProperty(operandA, operandB);
		case "!=":
			return new EffectNotEqualProperty(operandA, operandB);
		}
		
		return null;
	}

	public static EffectOperatorPrecedence GetPrecedence(string operatorName)
	{
		switch (operatorName)
		{
		case "+":
		case "-":
			return EffectOperatorPrecedence.Addition;
		case "*":
		case "/":
			return EffectOperatorPrecedence.Multiplication;
		case "<":
		case "<=":
		case ">":
		case ">=":
			return EffectOperatorPrecedence.Compare;
		case "==":
		case "!=":
			return EffectOperatorPrecedence.Equality;
		}

		return EffectOperatorPrecedence.MinPrecedence;
	}
}

public class EffectAddOpProperty : EffectBinaryOpProperty
{
	public EffectAddOpProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "+")
	{

	}

	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);

		if (valueA is float)
		{
			return (float)valueA + operandB.GetValue<float>(chain);
		}
		else if (valueA is Vector3)
		{
			return (Vector3)valueA + operandB.GetValue<Vector3>(chain);
		}
		else if (valueA is String)
		{
			return (string)valueA + operandB.GetValue<string>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA + operandB.GetValue<int>(chain);
		}

		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}


public class EffectSubOpProperty : EffectBinaryOpProperty
{
	public EffectSubOpProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "-")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA - operandB.GetValue<float>(chain);
		}
		else if (valueA is Vector3)
		{
			return (Vector3)valueA - operandB.GetValue<Vector3>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA - operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}


public class EffectMulOpProperty : EffectBinaryOpProperty
{
	public EffectMulOpProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "*")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			object valueB = operandB.GetObjectValue(chain);

			if (valueB is float)
			{
				return (float)valueA * (float)valueB;
			}
			else if (valueB is Vector3)
			{
				return (float)valueA * (Vector3)valueB;
			}
		}
		else if (valueA is Vector3)
		{
			object valueB = operandB.GetObjectValue(chain);
			
			if (valueB is float)
			{
				return (Vector3)valueA * (float)valueB;
			}
			else if (valueB is Vector3)
			{
				return Vector3.Scale((Vector3)valueA, (Vector3)valueB);
			}
		}
		else if (valueA is int)
		{
			return (int)valueA * operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectDivOpProperty : EffectBinaryOpProperty
{
	public EffectDivOpProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "/")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA / operandB.GetValue<float>(chain);
		}
		else if (valueA is Vector3)
		{
			return (Vector3)valueA / operandB.GetValue<float>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA / operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectLessThanProperty : EffectBinaryOpProperty
{
	public EffectLessThanProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "<")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA < operandB.GetValue<float>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA < operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectLessEqualProperty : EffectBinaryOpProperty
{
	public EffectLessEqualProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "<=")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA <= operandB.GetValue<float>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA <= operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectGreaterThanProperty : EffectBinaryOpProperty
{
	public EffectGreaterThanProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, ">")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA > operandB.GetValue<float>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA > operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectGreaterEqualProperty : EffectBinaryOpProperty
{
	public EffectGreaterEqualProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, ">=")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		object valueA = operandA.GetObjectValue(chain);
		
		if (valueA is float)
		{
			return (float)valueA >= operandB.GetValue<float>(chain);
		}
		else if (valueA is int)
		{
			return (int)valueA >= operandB.GetValue<int>(chain);
		}
		
		return null;
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectEqualProperty : EffectBinaryOpProperty
{
	public EffectEqualProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "==")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		return operandA.GetObjectValue(chain).Equals(operandB.GetObjectValue(chain));
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}

public class EffectNotEqualProperty : EffectBinaryOpProperty
{
	public EffectNotEqualProperty(EffectProperty operandA, EffectProperty operandB) : base(operandA, operandB, "!=")
	{
		
	}
	
	public override object GetObjectValue(EffectPropertyChain chain)
	{
		return !operandA.GetObjectValue(chain).Equals(operandB.GetObjectValue(chain));
	}
	
	public override void Accept (EffectPropertyVisitor visitor)
	{
		visitor.Visit(this);
	}
}