<effect-settings>
	
	

	<input-configuration name="destroy-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The game object to destroy
			</description>
		</parameter>
	</input-configuration>
	
	<effect class="DestroyGameObjectEffect" alias="destroy" namespace="game object" input="destroy-in">
		<description>
			Destroys a game object
		</description>
	</effect>
	
	<input-configuration name="cancel-in">
		<parameter>
			<name>target</name>
			<type>IEffect</type>
			<description>
				The effect to cancel
			</description>
		</parameter>
	</input-configuration>
	
	<effect class="CancelEventEffect" alias="cancel" namespace="control" input="cancel-in">
		<description>
			Cancels an effect
		</description>
	</effect>
	
	
	<input-configuration name="damage-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The game object to damage
			</description>
		</parameter>
		<parameter>
			<name>amount</name>
			<type>float</type>
			<description>
				The amount of damage to apply
			</description>
		</parameter>
	</input-configuration>
		
	<effect class="DamageEffect" alias="damage" namespace="game object" input="damage-in">
		<description>
			Sends a damage message to the damageable attached to the given game object
		</description>
	</effect>
	
	
	<input-configuration name="heal-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The game object to heal
			</description>
		</parameter>
		<parameter>
			<name>amount</name>
			<type>float</type>
			<description>
				The amount of damage to heal
			</description>
		</parameter>
	</input-configuration>
		
	<effect class="HealEffect" alias="heal" namespace="game object" input="heal-in">
		<description>
			Sends a heal message to the damageable attached to the given game object
		</description>
	</effect>
	
	<input-configuration name="knockback-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The game object to knockback
			</description>
		</parameter>
		<parameter>
			<name>direction</name>
			<type>Vector3</type>
			<description>
				The direction of the knockback
			</description>
		</parameter>
		<parameter>
			<name>strength</name>
			<type>float</type>
			<description>
				The strength of the knockback
			</description>
		</parameter>
	</input-configuration>
	
	<effect class="Knockback" alias="knockback" namespace="game object" input="knockback-in">
		<description>
			Sends a knockback message to any IKnockbackReciever components on the game object
		</description>
	</effect>
	
	<input-configuration name="delay-in">
		<parameter>
			<name>duration</name>
			<type>float</type>
			<description>
				The time in seconds to delay
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="delay-out">
		<parameter>
			<name>effect</name>
			<type>IEffect</type>
			<description>
				A reference to the delay effect
			</description>
		</parameter>
		<event name="on-timeout">
			<description>
Triggered after both duration and frames have passed,
if you only need only duration set frames to 0
			</description>
		</event>
	</output-configuration>
	
	<effect class="DelayEffect" alias="delay" namespace="control" input="delay-in" output="delay-out">
		<description>
			Deleys the firing of another event
		</description>
	</effect>

	<input-configuration name="repeat-in">
		<parameter>
			<name>count</name>
			<type>int</type>
			<description>
				The number of times to repeat the effect
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="repeat-out">
		<event name="on-repeat">
			<parameter>
				<name>index</name>
				<type>int</type>
				<description>
					The current repetition starting at 0 and going to count - 1
				</description>
			</parameter>
			<parameter>
				<name>normalizedIndex</name>
				<type>float</type>
				<description>
					A value in the range [0, 1] that indicates the current repetition
				</description>
			</parameter>
			<parameter>
				<name>signedIndex</name>
				<type>float</type>
				<description>
					A value in the range [-1, 1] that indicates the current repetition
				</description>
			</parameter>
			<description>
				Triggered for each repeat
			</description>
		</event>
	</output-configuration>

	<effect class="RepeatEffect" alias="repeat" namespace="control" input="repeat-in" output="repeat-out">
		<description>
			Repeats an event multiple times
		</description>
	</effect>
	
	
	<input-configuration name="if-in">
		<parameter>
			<name>condition</name>
			<type>bool</type>
			<description>
				The condition to evaluate
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="if-out">
		<event name="on-true">
			<description>
This event is triggered if the condition is true
			</description>
		</event>
		<event name="on-false">
			<description>
This event is triggered if the condition is false
			</description>
		</event>
	</output-configuration>
	
	<effect class="IfEffect" alias="if"  namespace="control" input="if-in" output="if-out">
		<description>
			Selects between two events based on a condition
		</description>
	</effect>
	
	<input-configuration name="foreach-in">
		<parameter>
			<name>elements</name>
			<type>List</type>
			<description>
				The list to iterator over
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="foreach-out">
		<event name="on-emit">
			<parameter>
				<name>element</name>
				<type>Any</type>
				<description>
					A single element in the list
				</description>
			</parameter>
			<parameter>
				<name>index</name>
				<type>int</type>
				<description>
					The index of the element in the list
				</description>
			</parameter>
			<description>
Called for each element in the input list
			</description>
		</event>
	</output-configuration>
	
	<effect class="ForeachEffect" alias="foreach"  namespace="control" input="foreach-in" output="foreach-out">
		<description>
			Loops through elements in a list
		</description>
	</effect>
	
	<input-configuration name="debug-log-in">
		<parameter>
			<name>label</name>
			<type>string</type>
			<description>
				The label to add to the debug log
			</description>
		</parameter>
		<parameter>
			<name>input</name>
			<type>Any</type>
			<description>
				The value to print to the console
			</description>
		</parameter>
	</input-configuration>
	
	<effect class="DebugLogEffect" alias="debug-log" namespace="debug" input="debug-log-in">
		<description>
			Outputs a value to the console
		</description>
	</effect>
	
	<input-configuration name="teleport-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The object to move
			</description>
		</parameter>
		<parameter>
			<name>position</name>
			<type>Vector3</type>
			<description>
				The position to teleport to
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="teleport-out">
		<event name="on-success">
			<description>
Called if the teleport was successful
			</description>
		</event>
		<event name="on-fail">
			<description>
Called if the teleport failed
			</description>
		</event>
	</output-configuration>
	
	<effect class="TeleportEffect" alias="teleport" namespace="movement" input="teleport-in" output="teleport-out">
		<description>
			Teleports an object to a specific location
		</description>
	</effect>
	
	<input-configuration name="dash-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The object to move
			</description>
		</parameter>
		<parameter>
			<name>position</name>
			<type>Vector3</type>
			<description>
				The position to teleport to
			</description>
		</parameter>
		<parameter>
			<name>speed</name>
			<type>float</type>
			<description>
				The speed to dash at
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="dash-out">
		<event name="on-completed">
			<description>
				Called if the dash completed without being interrupted
			</description>
		</event>
		<event name="on-interrupted">
			<description>
				Called if the dash was interrupted
			</description>
		</event>
		<event name="on-ended">
			<description>
				Called after the dash completes or is interrupted
			</description>
		</event>
	</output-configuration>
	
	<effect class="DashEffect" alias="dash" namespace="movement" input="dash-in" output="dash-out">
		<description>
			Dashes to a location at a speed
		</description>
	</effect>
	
	<input-configuration name="root-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The object to move
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="root-out">
		<parameter>
			<name>effect</name>
			<type>IEffect</type>
			<description>
				Pass this to a cancel effect to end the root
			</description>
		</parameter>
	</output-configuration>
	
	<effect class="RootEffect" alias="root" namespace="movement" input="root-in" output="root-out">
		<description>
			Holds down a player in place
		</description>
	</effect>

	<input-configuration name="get-ancestor-in">
		<parameter>
			<name>target</name>
			<type>GameObject</type>
			<description>
				The game object to search
			</description>
		</parameter>
		<parameter>
			<name>name</name>
			<type>string</type>
			<description>
				The name of the ancestor to retrieve. If no name is specified the immediate parent is used.
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="get-ancestor-out">
		<parameter>
			<name>result</name>
			<type>GameObject</type>
			<description>
				The ancestor retreived
			</description>
		</parameter>
	</output-configuration>
	
	<effect class="GetAncestorEffect" alias="get-ancestor" namespace="game object" input="get-ancestor-in" output="get-ancestor-out">
		<description>
			Gets an ancestor from a game object by name, or the immediate parent of no name is specified
		</description>
	</effect>
	
	<input-configuration name="capture-value-in">
		<parameter>
			<name>input</name>
			<type>Any</type>
			<description>
				The value to capture
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="capture-value-out">
		<parameter>
			<name>result</name>
			<type>Any</type>
			<description>
				The value of the captured input
			</description>
		</parameter>
	</output-configuration>
	
	<effect class="CaptureValueEffect" alias="capture-value"  namespace="control" input="capture-value-in" output="capture-value-out">
		<description>
			Grabs and saves the current value for any property
		</description>
	</effect>
	
	<input-configuration name="count-in">
		<parameter>
			<name>target</name>
			<type>IEffect</type>
			<description>
				The counter to increment
			</description>
		</parameter>
		<parameter>
			<name>element</name>
			<type>Any</type>
			<description>
				Object to add to the counter
			</description>
		</parameter>
	</input-configuration>
	
	<effect class="CountEffect" alias="count" namespace="count" input="count-in">
		<description>
			Increments a counter
		</description>
	</effect>
	
	<input-configuration name="counter-in">
		<parameter>
			<name>countTo</name>
			<type>int</type>
			<description>
				The value to count to
			</description>
		</parameter>
	</input-configuration>
	
	<output-configuration name="counter-out">
		<parameter>
			<name>currentValue</name>
			<type>int</type>
			<description>
				The current value of the counter
			</description>
		</parameter>
		<parameter>
			<name>normalizedValue</name>
			<type>float</type>
			<description>
				Maps 0 to countTo onto the range 0 to 1
			</description>
		</parameter>
		<parameter>
			<name>counterCompleted</name>
			<type>bool</type>
			<description>
				Returns true if currentValue >= countTo
			</description>
		</parameter>
		<parameter>
			<name>cancelled</name>
			<type>bool</type>
			<description>
				Returns true if the counter was cancelled
			</description>
		</parameter>
		<parameter>
			<name>effect</name>
			<type>IEffect</type>
			<description>
				Reference to the counter
			</description>
		</parameter>
		<parameter>
			<name>elements</name>
			<type>List</type>
			<description>
				The objects added to the counter
			</description>
		</parameter>
		<event name="on-count">
			<description>
				Called if the counter changes value
			</description>
		</event>
		<event name="on-completed">
			<description>
				Called when the counter reaches countTo
			</description>
		</event>
		<event name="on-cancelled">
			<description>
				Called when the counter reaches countTo
			</description>
		</event>
		<event name="on-ended">
			<description>
				Called when the counter reaches countTo
			</description>
		</event>
	</output-configuration>
	
	<effect class="CounterEffect" alias="counter" namespace="count" input="counter-in" output="counter-out">
		<description>
			Counts up to a specified value
		</description>
	</effect>

</effect-settings>